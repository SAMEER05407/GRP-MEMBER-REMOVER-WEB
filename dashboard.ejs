<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Group Member Remover - Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: #f8f9fa;
            min-height: 100vh;
        }

        .header {
            background: #25D366;
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            font-size: 1.5rem;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn {
            background: #dc3545;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
        }

        .container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .card {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .card-header {
            background: #f8f9fa;
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-body {
            padding: 1.5rem;
        }

        .status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .status-indicator.connected {
            background: #28a745;
        }

        .status-indicator.disconnected {
            background: #dc3545;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #25D366;
            color: white;
        }

        .btn-primary:hover {
            background: #1ea952;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .qr-container {
            text-align: center;
            padding: 2rem;
        }

        .qr-code {
            max-width: 256px;
            margin: 0 auto;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
        }

        .form-group input:focus {
            outline: none;
            border-color: #25D366;
        }

        .alert {
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 1rem;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-danger {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-info {
            background: #cce7ff;
            color: #004085;
            border: 1px solid #b3d7ff;
        }

        .hidden {
            display: none;
        }

        .progress-container {
            margin-top: 1rem;
        }

        .progress-bar {
            background: #e9ecef;
            border-radius: 10px;
            height: 20px;
            overflow: hidden;
        }

        .progress-fill {
            background: #25D366;
            height: 100%;
            transition: width 0.3s;
            width: 0%;
        }

        .progress-text {
            text-align: center;
            margin-top: 0.5rem;
            font-size: 0.9rem;
        }

        .mode-toggle {
            display: flex;
            gap: 0.5rem;
        }

        .mode-toggle .btn.active {
            background: #25D366;
            color: white;
        }

        .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
            resize: vertical;
            min-height: 120px;
        }

        .form-group textarea:focus {
            outline: none;
            border-color: #25D366;
        }

        .text-muted {
            color: #6c757d;
            font-size: 0.875rem;
        }

        .bulk-progress-container {
            margin-top: 2rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 5px;
        }

        .bulk-progress-item {
            padding: 0.5rem;
            margin: 0.25rem 0;
            border-radius: 3px;
            border-left: 4px solid #ddd;
        }

        .bulk-progress-item.processing {
            background: #fff3cd;
            border-left-color: #ffc107;
        }

        .bulk-progress-item.success {
            background: #d4edda;
            border-left-color: #28a745;
        }

        .bulk-progress-item.error {
            background: #f8d7da;
            border-left-color: #dc3545;
        }

        .bulk-summary {
            margin-top: 1rem;
            padding: 1rem;
            background: white;
            border-radius: 5px;
            border: 1px solid #dee2e6;
        }

        .summary-stat {
            display: inline-block;
            margin-right: 1rem;
            padding: 0.5rem;
            background: #e9ecef;
            border-radius: 3px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üì± WhatsApp Group Member Remover</h1>
        <div class="user-info">
            <span>Admin ID: <%= userId %></span>
            <a href="/logout" class="logout-btn">Logout</a>
        </div>
    </div>

    <div class="container">
        <!-- WhatsApp Connection Card -->
        <div class="card">
            <div class="card-header">
                <h3>WhatsApp Connection</h3>
                <div class="status">
                    <div class="status-indicator <%= isConnected ? 'connected' : 'disconnected' %>" id="statusIndicator"></div>
                    <span id="statusText"><%= isConnected ? 'Connected' : 'Not Connected' %></span>
                </div>
            </div>
            <div class="card-body">
                <div id="connectionControls">
                    <button class="btn btn-primary" id="connectBtn" <%= isConnected ? 'style="display:none"' : '' %>>
                        Connect WhatsApp
                    </button>
                    <button class="btn btn-danger" id="disconnectBtn" <%= !isConnected ? 'style="display:none"' : '' %>>
                        Disconnect WhatsApp
                    </button>
                </div>

                <div id="qrContainer" class="qr-container hidden">
                    <h4>Scan QR Code with WhatsApp</h4>
                    <div id="qrCode"></div>
                    <p>Open WhatsApp on your phone ‚Üí Settings ‚Üí Linked Devices ‚Üí Link a Device</p>
                </div>
            </div>
        </div>

        <!-- Group Management Card -->
        <div class="card" id="groupCard" <%= !isConnected ? 'style="display:none"' : '' %>>
            <div class="card-header">
                <h3>Group Management</h3>
                <div class="mode-toggle">
                    <button class="btn btn-primary" id="singleModeBtn">Single Group</button>
                    <button class="btn" id="bulkModeBtn">Bulk Mode</button>
                </div>
            </div>
            <div class="card-body">
                <div id="alerts"></div>

                <!-- Single Group Mode -->
                <div id="singleMode">
                    <form id="groupForm">
                        <div class="form-group">
                            <label for="groupLink">WhatsApp Group Invite Link:</label>
                            <input type="url" id="groupLink" name="groupLink" 
                                   placeholder="https://chat.whatsapp.com/..." required>
                        </div>

                        <button type="submit" class="btn btn-danger" id="removeBtn">
                            üóëÔ∏è Remove All Members (Except Admins)
                        </button>
                    </form>
                </div>

                <!-- Bulk Mode -->
                <div id="bulkMode" class="hidden">
                    <form id="bulkForm">
                        <div class="form-group">
                            <label for="bulkGroupLinks">WhatsApp Group Invite Links (up to 20):</label>
                            <textarea id="bulkGroupLinks" name="bulkGroupLinks" rows="6" 
                                      placeholder="Paste multiple group links here, separated by commas or new lines:&#10;https://chat.whatsapp.com/link1&#10;https://chat.whatsapp.com/link2&#10;..."></textarea>
                            <small class="text-muted">Enter up to 20 group links, separated by commas or new lines</small>
                        </div>

                        <button type="submit" class="btn btn-danger" id="bulkRemoveBtn">
                            üóëÔ∏è Start Bulk Remove (All Groups)
                        </button>
                    </form>
                </div>

                <div id="progressContainer" class="progress-container hidden">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <div class="progress-text" id="progressText">Preparing...</div>
                </div>

                <!-- Bulk Progress Details -->
                <div id="bulkProgressContainer" class="bulk-progress-container hidden">
                    <h4>Bulk Operation Progress</h4>
                    <div id="bulkProgressDetails"></div>
                    <div id="bulkSummary" class="bulk-summary hidden"></div>
                </div>
            </div>
        </div>

        <!-- Admin Panel (Super Admin Only) -->
        <% if (isSuperAdmin) { %>
        <div class="card">
            <div class="card-header">
                <h3>üëë Admin Panel</h3>
            </div>
            <div class="card-body">
                <div id="adminAlerts"></div>

                <!-- Current Admins -->
                <div style="margin-bottom: 2rem;">
                    <h4>Authorized Users:</h4>
                    <div id="adminsList" style="background: #f8f9fa; padding: 1rem; border-radius: 5px; margin-bottom: 1rem;">
                        <% admins.forEach(function(admin) { %>
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.5rem 0; border-bottom: 1px solid #dee2e6;">
                                <span><%= admin %> <% if (admin === '9209778319') { %><strong>(Super Admin)</strong><% } %></span>
                                <% if (admin !== '9209778319') { %>
                                    <button class="btn btn-danger" style="padding: 0.25rem 0.5rem; font-size: 0.8rem;" onclick="removeUser('<%= admin %>')">Remove</button>
                                <% } %>
                            </div>
                        <% }); %>
                    </div>
                </div>

                <!-- Add New User -->
                <div style="margin-bottom: 1rem;">
                    <h4>Add New User:</h4>
                    <div style="display: flex; gap: 0.5rem;">
                        <input type="text" id="newUserId" placeholder="Enter 10-digit ID" maxlength="10" style="flex: 1; padding: 0.5rem; border: 2px solid #ddd; border-radius: 5px;">
                        <button class="btn btn-primary" onclick="addUser()">Add User</button>
                    </div>
                </div>
            </div>
        </div>
        <% } %>

        <!-- Instructions Card -->
        <div class="card">
            <div class="card-header">
                <h3>‚ö†Ô∏è Important Instructions</h3>
            </div>
            <div class="card-body">
                <div class="alert alert-info">
                    <strong>Before using this tool:</strong>
                    <ul style="margin-top: 0.5rem; padding-left: 1.5rem;">
                        <li>Ensure you are an admin of the target WhatsApp group</li>
                        <li>This tool will remove ALL members except group admins</li>
                        <li>The action cannot be undone - use with caution</li>
                        <li>You must join the group first using the invite link</li>
                        <li>Rate limiting may cause delays between removals</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const userId = '<%= userId %>';

        // Elements
        const connectBtn = document.getElementById('connectBtn');
        const disconnectBtn = document.getElementById('disconnectBtn');
        const statusIndicator = document.getElementById('statusIndicator');
        const statusText = document.getElementById('statusText');
        const qrContainer = document.getElementById('qrContainer');
        const qrCode = document.getElementById('qrCode');
        const groupCard = document.getElementById('groupCard');
        const groupForm = document.getElementById('groupForm');
        const bulkForm = document.getElementById('bulkForm');
        const removeBtn = document.getElementById('removeBtn');
        const bulkRemoveBtn = document.getElementById('bulkRemoveBtn');
        const alerts = document.getElementById('alerts');
        const progressContainer = document.getElementById('progressContainer');
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        const singleModeBtn = document.getElementById('singleModeBtn');
        const bulkModeBtn = document.getElementById('bulkModeBtn');
        const singleMode = document.getElementById('singleMode');
        const bulkMode = document.getElementById('bulkMode');
        const bulkProgressContainer = document.getElementById('bulkProgressContainer');
        const bulkProgressDetails = document.getElementById('bulkProgressDetails');
        const bulkSummary = document.getElementById('bulkSummary');

        // Join user session
        socket.emit('join-session', userId);

        // Socket event listeners
        socket.on('qr-code', (qrData) => {
            if (qrData) {
                console.log('üì± QR Code received from server');
                qrCode.innerHTML = `<img src="${qrData}" alt="QR Code" class="qr-code">`;
                qrContainer.classList.remove('hidden');
                showAlert('info', 'QR Code generated! Please scan with your WhatsApp mobile app.');
            } else {
                console.log('üö´ QR Code cleared');
                qrContainer.classList.add('hidden');
            }
        });

        socket.on('connection-status', (status) => {
            console.log('üì° Connection status update:', status);
            updateConnectionStatus(status.connected);
            if (status.connected) {
                showAlert('success', 'WhatsApp connected successfully!');
            }
        });

        socket.on('qr-error', (error) => {
            console.error('‚ùå QR Code error:', error);
            showAlert('danger', 'QR Code generation failed: ' + error);
        });

        socket.on('removal-progress', (progress) => {
            const percentage = (progress.removed / progress.total) * 100;
            progressFill.style.width = percentage + '%';
            progressText.textContent = `Removed ${progress.removed} of ${progress.total} members`;
        });

        socket.on('bulk-progress', (progress) => {
            const percentage = (progress.current / progress.total) * 100;
            progressFill.style.width = percentage + '%';
            progressText.textContent = progress.status;

            // Add or update progress item
            const itemId = `bulk-item-${progress.current}`;
            let item = document.getElementById(itemId);

            if (!item) {
                item = document.createElement('div');
                item.id = itemId;
                item.className = 'bulk-progress-item processing';
                bulkProgressDetails.appendChild(item);
            }

            item.textContent = `Group ${progress.current}/${progress.total}: Processing...`;
            item.className = 'bulk-progress-item processing';
        });

        // Mode toggle
        singleModeBtn.addEventListener('click', () => {
            singleModeBtn.classList.add('active');
            bulkModeBtn.classList.remove('active');
            singleMode.classList.remove('hidden');
            bulkMode.classList.add('hidden');
            bulkProgressContainer.classList.add('hidden');
        });

        bulkModeBtn.addEventListener('click', () => {
            bulkModeBtn.classList.add('active');
            singleModeBtn.classList.remove('active');
            bulkMode.classList.remove('hidden');
            singleMode.classList.add('hidden');
        });

        // Initialize single mode as active
        singleModeBtn.classList.add('active');

        // Bulk form submission
        bulkForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const bulkGroupLinksText = document.getElementById('bulkGroupLinks').value.trim();
            if (!bulkGroupLinksText) {
                showAlert('danger', 'Please enter at least one group link');
                return;
            }

            // Parse group links
            const groupLinks = bulkGroupLinksText
                .split(/[,\n\r]+/)
                .map(link => link.trim())
                .filter(link => link.length > 0);

            if (groupLinks.length === 0) {
                showAlert('danger', 'Please enter valid group links');
                return;
            }

            if (groupLinks.length > 20) {
                showAlert('danger', 'Maximum 20 group links allowed');
                return;
            }

            bulkRemoveBtn.disabled = true;
            bulkRemoveBtn.textContent = 'Processing...';
            progressContainer.classList.remove('hidden');
            bulkProgressContainer.classList.remove('hidden');
            bulkProgressDetails.innerHTML = '';
            bulkSummary.classList.add('hidden');
            progressFill.style.width = '0%';
            progressText.textContent = 'Starting bulk operation...';

            try {
                const response = await fetch('/bulk-remove-members', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ groupLinksText: bulkGroupLinksText })
                });
                const result = await response.json();

                if (result.success) {
                    progressFill.style.width = '100%';
                    progressText.textContent = 'Bulk operation completed!';

                    // Update progress items with final results
                    result.groupResults.forEach((groupResult, index) => {
                        const itemId = `bulk-item-${index + 1}`;
                        const item = document.getElementById(itemId);
                        if (item) {
                            if (groupResult.success) {
                                item.className = 'bulk-progress-item success';
                                item.textContent = `Group ${index + 1}: ‚úÖ ${groupResult.removed} members removed`;
                            } else {
                                item.className = 'bulk-progress-item error';
                                item.textContent = `Group ${index + 1}: ‚ùå ${groupResult.error}`;
                            }
                        }
                    });

                    // Show summary
                    bulkSummary.innerHTML = `
                        <h5>Bulk Operation Summary</h5>
                        <div class="summary-stat">Total Groups: ${result.totalGroups}</div>
                        <div class="summary-stat">Successful: ${result.successCount}</div>
                        <div class="summary-stat">Failed: ${result.failedJoins.length}</div>
                        <div class="summary-stat">Total Members Removed: ${result.totalMembersRemoved}</div>
                    `;
                    bulkSummary.classList.remove('hidden');

                    showAlert('success', `Bulk operation completed! ${result.successCount}/${result.totalGroups} groups processed successfully. ${result.totalMembersRemoved} total members removed.`);
                } else {
                    showAlert('danger', 'Bulk operation failed: ' + result.error);
                }
            } catch (error) {
                showAlert('danger', 'Request error: ' + error.message);
            } finally {
                bulkRemoveBtn.disabled = false;
                bulkRemoveBtn.textContent = 'üóëÔ∏è Start Bulk Remove (All Groups)';
                setTimeout(() => {
                    progressContainer.classList.add('hidden');
                }, 3000);
            }
        });

        // Event listeners
        connectBtn.addEventListener('click', async () => {
            console.log('üîó Connect button clicked');
            connectBtn.disabled = true;
            connectBtn.textContent = 'Connecting...';

            try {
                console.log('üì° Sending connect request...');
                const response = await fetch('/connect-whatsapp', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });

                console.log('üì® Response received:', response.status, response.statusText);

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await safeJsonParse(response);

                if (!result.success) {
                    showAlert('danger', 'Connection failed: ' + (result.error || 'Unknown error'));
                    connectBtn.disabled = false;
                    connectBtn.textContent = 'Connect WhatsApp';
                    console.error('‚ùå Connect failed:', result.error);
                } else {
                    console.log('‚úÖ Connect request successful, waiting for QR code...');
                    showAlert('info', 'Connection initiated. Please wait for QR code...');
                }
            } catch (error) {
                console.error('üí• Connect error:', error);
                if (error.message.includes('Unexpected token')) {
                    showAlert('danger', 'Server error: Received invalid response format. Please refresh the page and try again.');
                } else {
                    showAlert('danger', 'Connection error: ' + error.message);
                }
                connectBtn.disabled = false;
                connectBtn.textContent = 'Connect WhatsApp';
            }
        });

        disconnectBtn.addEventListener('click', async () => {
            console.log('üîå Disconnect button clicked');
            disconnectBtn.disabled = true;
            disconnectBtn.textContent = 'Disconnecting...';

            try {
                console.log('üì° Sending disconnect request...');
                const response = await fetch('/disconnect-whatsapp', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });

                console.log('üì® Response received:', response.status, response.statusText);

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await safeJsonParse(response);

                if (result.success) {
                    updateConnectionStatus(false);
                    showAlert('success', result.message || 'WhatsApp disconnected successfully');
                    console.log('‚úÖ Disconnect successful');
                } else {
                    showAlert('danger', 'Disconnection failed: ' + (result.error || 'Unknown error'));
                    console.error('‚ùå Disconnect failed:', result.error);
                }
            } catch (error) {
                console.error('üí• Disconnect error:', error);
                if (error.message.includes('Unexpected token')) {
                    showAlert('danger', 'Server error: Received invalid response format. Please refresh the page and try again.');
                } else {
                    showAlert('danger', 'Disconnection error: ' + error.message);
                }
            } finally {
                disconnectBtn.disabled = false;
                disconnectBtn.textContent = 'Disconnect WhatsApp';
                console.log('üîÑ Disconnect button reset');
            }
        });

        groupForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const groupLink = document.getElementById('groupLink').value;
            if (!groupLink) {
                showAlert('danger', 'Please enter a group link');
                return;
            }

            removeBtn.disabled = true;
            removeBtn.textContent = 'Processing...';
            progressContainer.classList.remove('hidden');
            progressFill.style.width = '0%';
            progressText.textContent = 'Initializing...';

            try {
                const response = await fetch('/remove-members', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ groupLink })
                });
                const result = await response.json();

                if (result.success) {
                    progressFill.style.width = '100%';
                    progressText.textContent = 'Completed!';
                    showAlert('success', result.message + ` (${result.removed}/${result.total} members processed)`);

                    if (result.errors) {
                        showAlert('danger', 'Some errors occurred: ' + result.errors.join(', '));
                    }
                } else {
                    showAlert('danger', 'Operation failed: ' + result.error);
                }
            } catch (error) {
                showAlert('danger', 'Request error: ' + error.message);
            } finally {
                removeBtn.disabled = false;
                removeBtn.textContent = 'üóëÔ∏è Remove All Members (Except Admins)';
                setTimeout(() => {
                    progressContainer.classList.add('hidden');
                }, 3000);
            }
        });

        function updateConnectionStatus(connected) {
            if (connected) {
                statusIndicator.className = 'status-indicator connected';
                statusText.textContent = 'Connected';
                connectBtn.style.display = 'none';
                disconnectBtn.style.display = 'inline-block';
                groupCard.style.display = 'block';
                qrContainer.classList.add('hidden');
                connectBtn.disabled = false;
                connectBtn.textContent = 'Connect WhatsApp';
            } else {
                statusIndicator.className = 'status-indicator disconnected';
                statusText.textContent = 'Not Connected';
                connectBtn.style.display = 'inline-block';
                disconnectBtn.style.display = 'none';
                groupCard.style.display = 'none';
                connectBtn.disabled = false;
                connectBtn.textContent = 'Connect WhatsApp';
            }
        }

        function showAlert(type, message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            alerts.appendChild(alertDiv);

            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        function showAdminAlert(type, message) {
            const adminAlerts = document.getElementById('adminAlerts');
            if (adminAlerts) {
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type}`;
                alertDiv.textContent = message;
                adminAlerts.appendChild(alertDiv);

                setTimeout(() => {
                    alertDiv.remove();
                }, 3000);
            }
        }

        async function addUser() {
            const newUserId = document.getElementById('newUserId').value.trim();

            if (!newUserId || newUserId.length !== 10 || !/^\d{10}$/.test(newUserId)) {
                showAdminAlert('danger', 'Please enter a valid 10-digit numeric ID');
                return;
            }

            try {
                const response = await fetch('/admin/add-user', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ newUserId })
                });
                const result = await response.json();

                if (result.success) {
                    showAdminAlert('success', result.message);
                    document.getElementById('newUserId').value = '';
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAdminAlert('danger', result.error);
                }
            } catch (error) {
                showAdminAlert('danger', 'Error adding user: ' + error.message);
            }
        }

        async function removeUser(userId) {
            if (!confirm(`Are you sure you want to remove user ${userId}?`)) {
                return;
            }

            try {
                const response = await fetch('/admin/remove-user', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ removeUserId: userId })
                });
                const result = await response.json();

                if (result.success) {
                    showAdminAlert('success', result.message);
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAdminAlert('danger', result.error);
                }
            } catch (error) {
                showAdminAlert('danger', 'Error removing user: ' + error.message);
            }
        }

        // Utility function for safe JSON parsing
        async function safeJsonParse(response) {
            const contentType = response.headers.get("content-type");
            if (contentType && contentType.includes("application/json")) {
                try {
                    return await response.json();
                } catch (error) {
                    console.error("JSON parsing error:", error);
                    throw new Error("Invalid JSON received from server.");
                }
            } else {
                const text = await response.text();
                console.error("Non-JSON response:", text);
                throw new Error("Unexpected non-JSON response from server.");
            }
        }
    </script>
</body>
</html>